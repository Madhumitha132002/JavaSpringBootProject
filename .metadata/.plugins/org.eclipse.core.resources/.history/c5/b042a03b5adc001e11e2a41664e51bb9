import com.SpringBootProject.StudentDetails.Model.StudentModel;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.List;

public class PDFGenerator {

    public static ResponseEntity<Resource> getPDFFile(List<StudentModel> studentList) {
        String filename = "students.pdf";

        try {
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            Document document = new Document(PageSize.A4);
            PdfWriter.getInstance(document, outputStream);

            document.open();

            Font fontTitle = FontFactory.getFont(FontFactory.TIMES_ROMAN);
            fontTitle.setSize(20);

            Paragraph paragraph = new Paragraph("List Of Students", fontTitle);
            paragraph.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(paragraph);

            PdfPTable table = new PdfPTable(11); // Adjusted to 11 columns

            table.setWidthPercentage(100f);
            table.setWidths(new float[]{1, 3, 2});
            table.setSpacingBefore(10);

            PdfPCell cell = new PdfPCell();
            cell.setBackgroundColor(new java.awt.Color(0, 0, 255));
            cell.setPadding(5);

            Font font = FontFactory.getFont(FontFactory.TIMES_ROMAN);
            font.setColor(new java.awt.Color(0, 0, 128));

            // Adding column headers
            cell.setPhrase(new Phrase("StudentId", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("Student Name", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("RegisterNo", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("Gender", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("Age", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("PhoneNumber", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("CurrentStatus", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("EmailId", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("Course", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("Batch", font));
            table.addCell(cell);
            cell.setPhrase(new Phrase("Fees", font));
            table.addCell(cell);

            // Adding data rows
            for (StudentModel student : studentList) {
                table.addCell(String.valueOf(student.getStudentId()));
                table.addCell(student.getName());
                table.addCell(student.getRegisterNo());
                table.addCell(student.getGender());
                table.addCell(String.valueOf(student.getAge()));
                table.addCell(student.getPhoneNumber());
                table.addCell(student.getCurrentStatus());
                table.addCell(student.getEmailId());
                table.addCell(student.getCourse());
                table.addCell(student.getBatch());
                table.addCell(String.valueOf(student.getFees()));
            }

            document.add(table);
            document.close();

            // Create InputStreamResource from ByteArrayOutputStream
            InputStreamResource resource = new InputStreamResource(new ByteArrayInputStream(outputStream.toByteArray()));

            // Set headers and return ResponseEntity
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + filename)
                    .contentType(MediaType.APPLICATION_PDF)
                    .body(resource);
        } catch (DocumentException e) {
            e.printStackTrace();
            // Handle document generation exception
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
}
