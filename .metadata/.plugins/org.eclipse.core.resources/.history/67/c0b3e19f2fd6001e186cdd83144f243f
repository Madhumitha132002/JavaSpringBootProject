package com.SpringBootProject.StudentDetails.Controller;

import com.SpringBootProject.StudentDetails.Exception.StudentDetailsNotFoundException;
import com.SpringBootProject.StudentDetails.Model.StudentModel;
import com.SpringBootProject.StudentDetails.Repository.StudentDAO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.util.StringUtils;

import java.util.List;

@RestController
@RequestMapping("/students")
public class StudentController {

    private final StudentDAO studentRepository;

    @Autowired
    public StudentController(StudentDAO studentRepository) {
        this.studentRepository = studentRepository;
    }
 

    @PostMapping("/add")
    public ResponseEntity<String> addStudent(@RequestBody StudentModel studentModel) {
        // Check if any of the required fields are empty
        if (StringUtils.isEmpty(studentModel.getName()) ||
            StringUtils.isEmpty(studentModel.getRegisterNo()) ||
            StringUtils.isEmpty(studentModel.getGender()) ||
            StringUtils.isEmpty(studentModel.getAge()) ||
            StringUtils.isEmpty(studentModel.getPhoneNumber()) ||
            StringUtils.isEmpty(studentModel.getCurrentStatus()) ||
            StringUtils.isEmpty(studentModel.getEmailId()) ||
            StringUtils.isEmpty(studentModel.getCourse()) ||
            StringUtils.isEmpty(studentModel.getBatch()) ||
            StringUtils.isEmpty(studentModel.getFees())) {
            
            // If any required field is empty, return bad request status
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("All input fields are required");
        }
        
        // If all required fields are present, proceed to add the student
        studentRepository.addStudentDetails(studentModel);
        return ResponseEntity.status(HttpStatus.CREATED).body("Student added successfully");
    }
    @DeleteMapping("/delete/{studentId}")
    public ResponseEntity<String> deleteStudent(@PathVariable int studentId) {
        studentRepository.deleteStudentDetails(studentId);
        return ResponseEntity.ok().body("Student deleted successfully");
    }

    @PutMapping("/update")
    public ResponseEntity<String> updateStudent(@RequestBody StudentModel studentModel) {
        boolean isUpdated = studentRepository.updateStudentDetails(studentModel);
        System.out.print(studentModel);
        if (isUpdated) {
            return ResponseEntity.ok().body("Student updated successfully");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Student not found or update failed");
        }
    }

    @GetMapping("/{studentId}")
    public ResponseEntity<StudentModel> getStudentById(@PathVariable int studentId) {
        try {
            StudentModel student = studentRepository.findById(studentId);
            return ResponseEntity.ok().body(student);
        } catch (StudentDetailsNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
    }

    @GetMapping("/all")
    public ResponseEntity<List<StudentModel>> getAllStudents() {
        List<StudentModel> students = studentRepository.getAllStudentDetails();
        if (!students.isEmpty()) {
            return ResponseEntity.ok().body(students); // Return list of students if not empty
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); // Return 404 if list is empty
        }
    }
}
