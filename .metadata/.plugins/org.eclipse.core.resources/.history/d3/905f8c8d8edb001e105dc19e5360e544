package com.SpringBootProject.StudentDetails.Controller;


import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.SpringBootProject.StudentDetails.Model.StudentModel;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
@AutoConfigureMockMvc
public class StudentControllerTest {

    @Autowired
    private MockMvc mockMvc;


//    @Test
//    @DisplayName("Should add the records to the database")
    void addStudentDetails() throws Exception {
        // Create a sample student model
        StudentModel student = new StudentModel();
        student.setName("Gugan");
        student.setRegisterNo("679");
        student.setGender("Male");
        student.setAge(23);
        student.setPhoneNumber("8098161001");
        student.setCurrentStatus("Undergoing");
        student.setEmailId("Gugan@gmail.com");
        student.setCourse("MCA");
        student.setBatch("set89");
        student.setFees(19000);

          mockMvc.perform(post("/students/add")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(student)))
        		.andExpect(status().isCreated());
    }

    @Test
    @DisplayName("Should delete the records from database")
    void deleteStudentDetails() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.delete("/students/delete/{id}", 84))
                .andExpect(status().isOk());
    }
    
    
    
    
    
    private String asJsonString(final Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}