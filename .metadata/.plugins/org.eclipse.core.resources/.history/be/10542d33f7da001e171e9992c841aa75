package com.SpringBootProject.StudentDetails.Service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.SpringBootProject.StudentDetails.Model.StudentModel;
import com.SpringBootProject.StudentDetails.Repository.StudentDAOImpl;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
@AutoConfigureMockMvc
public class StudentServiceTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    @InjectMocks
    private StudentDetailsServiceImpl studentservice;
    
    @Mock
    private StudentDAOImpl studentrepository;
//
//    @Test
//    @DisplayName("Should add the records to the database")
    void addStudentDetails() throws Exception {
        // Create a sample student model
        StudentModel student = new StudentModel();
        student.setName("Gugan");
        student.setRegisterNo("679");
        student.setGender("Male");
        student.setAge(23);
        student.setPhoneNumber("8098161001");
        student.setCurrentStatus("Undergoing");
        student.setEmailId("Gugan@gmail.com");
        student.setCourse("MCA");
        student.setBatch("set89");
        student.setFees(19000);

        // Perform POST request using MockMvc
        MvcResult result = mockMvc.perform(post("/students/add")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(student)))
                .andReturn();
        // Extract and print the status code
        int statusCode = result.getResponse().getStatus();
  
        // Assert the status code
        assertEquals(HttpStatus.CREATED.value(), statusCode);   
    }
//    @Test
//    @DisplayName("Should delete the records from database")
    void deleteStudentDetails() throws Exception{
        MvcResult result = mockMvc.perform(delete("/students/delete/{id}",80)
                .contentType(MediaType.APPLICATION_JSON)
                .content("{\"id\": 80}")
                .accept(MediaType.APPLICATION_JSON))
                .andReturn();
        
        int statusCode = result.getResponse().getStatus();
        assertEquals(HttpStatus.OK.value(), statusCode);  
    }
    @Test
    @DisplayName("Should update the Student Details")
    void updateStudentDetails() throws Exception {
        // Create a sample student model
        StudentModel student = new StudentModel();
        student.setStudentId(82);
        student.setName("Gugan");
        student.setRegisterNo("679");
        student.setGender("Male");
        student.setAge(23);
        student.setPhoneNumber("8098161001");
        student.setCurrentStatus("Completed");
        student.setEmailId("Gugan@gmail.com");
        student.setCourse("MCA");
        student.setBatch("set89");
        student.setFees(19000);

        // Perform POST request using MockMvc
        MvcResult result = mockMvc.perform(put("/students/update")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(student)))
                .andReturn();

        // Extract and print the status code
        int statusCode = result.getResponse().getStatus();
   
        // Assert the status code
        assertEquals(HttpStatus.CREATED.value(), statusCode);  
    }
    @Test
    @DisplayName("It Fetch all the records from the datatable")
    void getAllStudentDetails() throws Exception {
        // Create a list of students
        List<StudentModel> studentList = new ArrayList<>();
        StudentModel studentModel = new StudentModel();
        studentList.add(studentModel);

        // Create a ResponseEntity containing the list
        ResponseEntity<List<StudentModel>> responseEntity = ResponseEntity.ok(studentList);

        // Stub the behavior of studentservice.getAllStudentDetails() to return the ResponseEntity
        when(studentservice.getAllStudentDetails()).thenReturn(responseEntity);

        // Performing the HTTP GET request to your endpoint
        MvcResult result = mockMvc.perform(get("/students/all")).andReturn();
        int statusCode = result.getResponse().getStatus();

        // Assert the status code
        assertEquals(HttpStatus.OK.value(), statusCode);

        // Verifying that the service method was called
        verify(studentservice, times(1)).getAllStudentDetails();
    }

    private String asJsonString(final Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
