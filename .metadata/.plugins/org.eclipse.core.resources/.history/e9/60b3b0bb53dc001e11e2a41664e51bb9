package com.SpringBootProject.StudentDetails.Service;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import com.SpringBootProject.StudentDetails.Model.StudentModel;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

public class PDFGenerator {

	
	
    private List<StudentModel> studentList;

    public void generator(List<StudentModel> studentList) throws DocumentException, IOException {
        
        Document document = new Document(PageSize.A4);
        
        PdfWriter.getInstance(document, studentList.getOutputStream());

        document.open();
       
        Font fontTitle = FontFactory.getFont(FontFactory.TIMES_ROMAN);
        fontTitle.setSize(20);
       
        Paragraph paragraph = new Paragraph("List Of Students", fontTitle);
       
        paragraph.setAlignment(Paragraph.ALIGN_CENTER);
        
        document.add(paragraph);
        
        PdfPTable table = new PdfPTable(11);
       
        table.setWidthPercentage(100f);
        table.setWidths(new float[] { 1, 3, 2 });
        table.setSpacingBefore(10);
        // Create Table Cells for table header
        PdfPCell cell = new PdfPCell();
        // Setting the background color and padding
        cell.setBackgroundColor(new java.awt.Color(0, 0, 255)); // blue color
        cell.setPadding(5);
        // Creating font
        // Setting font style and size
        Font font = FontFactory.getFont(FontFactory.TIMES_ROMAN);
        font.setColor(new java.awt.Color(0,0,128)); // White color
        // Adding headings in the created table cell/ header
        // Adding Cell to table
        cell.setPhrase(new Phrase("StudentId", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("Student Name", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("RegisterNo", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("Gender", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("Age", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("PhoneNumber", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("CurrentStatus", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("EmailId", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("Course", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("Batch", font));
        table.addCell(cell);
        cell.setPhrase(new Phrase("Fees", font));
        table.addCell(cell);
        // Iterating over the list of students
        for (StudentModel student : studentList) {
           
            table.addCell(String.valueOf(student.getStudentId()));
            table.addCell(student.getName());
            table.addCell(student.getRegisterNo());
            table.addCell(student.getGender());
            table.addCell(String.valueOf(student.getAge()));
            table.addCell(student.getPhoneNumber());
            table.addCell(student.getCurrentStatus());
            table.addCell(student.getEmailId());
            table.addCell(student.getCourse());
            table.addCell(student.getBatch());
            table.addCell(String.valueOf(student.getFees()));
            
            
            
        }
        // Adding the created table to document
        document.add(table);
        // Closing the document
        document.close();
    }

	
}
